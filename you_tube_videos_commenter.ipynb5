{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/luckystarlet/whatapp-forkitonyi/blob/main/you_tube_videos_commenter.ipynb5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 1: Data Collection using YouTube API"
      ],
      "metadata": {
        "id": "TW8PQtSzAtYN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqSGWuAp_75R",
        "outputId": "d5d2160b-fd92-425e-baa0-d2d47381dda2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: google-auth in /usr/local/lib/python3.10/dist-packages (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.10/dist-packages (1.2.0)\n",
            "Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.10/dist-packages (0.1.1)\n",
            "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (2.84.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth) (5.3.3)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth) (0.4.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib) (1.3.1)\n",
            "Requirement already satisfied: httplib2>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-httplib2) (0.22.0)\n",
            "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.11.1)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (4.1.1)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (1.63.0)\n",
            "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.20.3)\n",
            "Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2.31.0)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2>=0.19.0->google-auth-httplib2) (3.1.2)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth) (0.6.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.2.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2024.2.2)\n",
            "Enter a valid YouTube video ID (e.g., 'Ks-_Mh1QhMc'): Ks-_Mh1QhMc\n",
            "Fetched 7571 comments.\n",
            "['4RixMPF4xis', 'ukzFI9rgwfU', 'PeMlggyqz0Y', '9gGnTQTYNaE', 'i_LwzRVP7bg']\n",
            "Enter a valid YouTube video ID: Ks-_Mh1QhMc\n"
          ]
        }
      ],
      "source": [
        "from googleapiclient.discovery import build\n",
        "!pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n",
        "import pandas as pd\n",
        "# Set up YouTube API key\n",
        "api_key = 'AIzaSyB9mWPsOvoNnEreqdfLYyl3qa_k9cXVcC0'\n",
        "\n",
        "# Initialize YouTube API client\n",
        "youtube = build('youtube', 'v3', developerKey=api_key)\n",
        "import googleapiclient.discovery\n",
        "\n",
        "# Function to fetch comments from a video\n",
        "def get_video_comments(video_id, api_key):\n",
        "    comments = []\n",
        "    youtube = googleapiclient.discovery.build(\"youtube\", \"v3\", developerKey=api_key)\n",
        "    request = youtube.commentThreads().list(\n",
        "        part=\"snippet\",\n",
        "        videoId=video_id,\n",
        "        maxResults=100  # Adjust as needed\n",
        "    )\n",
        "    response = request.execute()\n",
        "\n",
        "    while request:\n",
        "        for item in response['items']:\n",
        "            comment = item['snippet']['topLevelComment']['snippet']['textDisplay']\n",
        "            comments.append(comment)\n",
        "\n",
        "        # Check for more comments\n",
        "        if 'nextPageToken' in response:\n",
        "            request = youtube.commentThreads().list(\n",
        "                part=\"snippet\",\n",
        "                videoId=video_id,\n",
        "                pageToken=response['nextPageToken'],\n",
        "                maxResults=100\n",
        "            )\n",
        "            response = request.execute()\n",
        "        else:\n",
        "            break\n",
        "\n",
        "    return comments\n",
        "\n",
        "# Example usage\n",
        "api_key = \"AIzaSyB9mWPsOvoNnEreqdfLYyl3qa_k9cXVcC0\"\n",
        "video_id = input(\"Enter a valid YouTube video ID (e.g., 'Ks-_Mh1QhMc'): \")\n",
        "comments = get_video_comments(video_id, api_key)\n",
        "print(f\"Fetched {len(comments)} comments.\")\n",
        "\n",
        "# Search for videos using a specific query\n",
        "def search_videos(query, max_results=10):\n",
        "    video_ids = []\n",
        "    request = youtube.search().list(\n",
        "        part='id',\n",
        "        q=query,\n",
        "        type='video',\n",
        "        maxResults=max_results\n",
        "    )\n",
        "    while request:\n",
        "        response = request.execute()\n",
        "        for item in response['items']:\n",
        "            video_ids.append(item['id']['videoId'])\n",
        "        request = youtube.search().list_next(request, response)\n",
        "    return video_ids\n",
        "\n",
        "# Example: Search for videos related to 'machine learning'\n",
        "query = 'machine learning'\n",
        "video_ids = search_videos(query)\n",
        "\n",
        "# Print the first 5 video IDs\n",
        "print(video_ids[:5])\n",
        "# Search for comments on a specific video\n",
        "def get_video_comments(video_id):\n",
        "    comments = []\n",
        "    request = youtube.commentThreads().list(\n",
        "        part='snippet',\n",
        "        videoId=video_id,\n",
        "        maxResults=100  # Adjust as needed\n",
        "    )\n",
        "    while request:\n",
        "        response = request.execute()\n",
        "        for item in response['items']:\n",
        "            comment = item['snippet']['topLevelComment']['snippet']['textOriginal']\n",
        "            comments.append(comment)\n",
        "        request = youtube.commentThreads().list_next(request, response)\n",
        "    return comments\n",
        "\n",
        "# Example: Get comments from a video\n",
        "video_id = input(\"Enter a valid YouTube video ID: \")\n",
        "comments = get_video_comments(video_id)\n",
        "\n",
        "# Convert comments to DataFrame\n",
        "comments_df = pd.DataFrame(comments, columns=['comment'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Preprocessing**"
      ],
      "metadata": {
        "id": "LtAOsXJSDVwP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "import re\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "\n",
        "def preprocess_text(text):\n",
        "    text = text.lower()\n",
        "    text = re.sub(r'http\\S+|www\\S+|@[^\\s]+', '', text)\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    tokens = nltk.word_tokenize(text)\n",
        "    stop_words = set(nltk.corpus.stopwords.words('english'))\n",
        "    filtered_tokens = [word for word in tokens if word not in stop_words]\n",
        "    return ' '.join(filtered_tokens)\n",
        "\n",
        "clean_comments = [preprocess_text(comment) for comment in comments]\n",
        "\n",
        "\n",
        "\n",
        "# Sample labels for demonstration (Replace with actual labels)\n",
        "labels = [1 if 'great' in comment else 0 for comment in clean_comments]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "18-ZKmgDWCSe",
        "outputId": "a2fd96f3-7135-4120-d404-4668d75fa60f"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Model Training and Evaluation"
      ],
      "metadata": {
        "id": "6W7HQPuvEQ0a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def extract_features(data_point):\n",
        "  title = data_point[\"title\"]\n",
        "  description = data_point[\"description\"]\n",
        "def extract_features(data_point):\n",
        "  title = data_point[\"title\"]\n",
        "def preprocess_data_point(data_point):\n",
        "  description = data_point[\"description\"]\n",
        "  features = [len(title), len(description)]\n",
        "  return features\n",
        "def train_and_evaluate_model(search_query, positive_label=\"positive\"):\n",
        "  data = get_video_data(search_query)\n",
        "\n",
        "  if data is not None:\n",
        "    # Extract features and labels\n",
        "    X = data[\"features\"].tolist()\n",
        "    y = [positive_label if \"positive\" in title.lower() or \"positive\" in description.lower() else \"negative\" for title in data[\"title\"]]\n",
        "\n",
        "    # Split data into training and testing sets\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    # Train the model\n",
        "    model = LogisticRegression()  # Replace with your model\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Evaluate the model\n",
        "    predictions = model.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, predictions)\n",
        "    print(f\"Model accuracy for classifying '{positive_label}' videos: {accuracy:.4f}\")\n",
        "\n",
        "  else:\n",
        "    print(\"Error retrieving data from Youtube API\")\n",
        "def train_and_evaluate_model(search_query):\n",
        "    # Code to train and evaluate the model\n",
        "    # ...\n",
        "    pass\n",
        "\n",
        "# Example usage\n",
        "content_copy = \"Your intended value for content_copy\"\n",
        "search_query = \"funny cat videos\"\n",
        "train_and_evaluate_model(search_query)\n",
        "content_copy\n"
      ],
      "metadata": {
        "id": "LlpkYIbtqHyr",
        "outputId": "9f742563-4694-4411-b56c-6e7dd75cb726",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Your intended value for content_copy'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 4: Save the Model"
      ],
      "metadata": {
        "id": "vIF3hGh6Znnk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "import joblib\n",
        "\n",
        "# Example data\n",
        "X_train = [\"Great video!\", \"Subscribe to my channel!\", \"Nice content!\", \"Check out my profile!\"]\n",
        "y_train = [1, 0, 1, 0]\n",
        "\n",
        "# Vectorize the data\n",
        "vectorizer = TfidfVectorizer()\n",
        "X_train_vec = vectorizer.fit_transform(X_train)\n",
        "\n",
        "# Train a logistic regression model\n",
        "model = LogisticRegression()\n",
        "model.fit(X_train_vec, y_train)\n",
        "\n",
        "# Save the model and vectorizer to files\n",
        "joblib.dump(model, 'model.joblib')\n",
        "joblib.dump(vectorizer, 'vectorizer.joblib')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MnNPA1kF_oR5",
        "outputId": "31021128-efd0-4f14-da1b-1c7cc3699672"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['vectorizer.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Deploy the Model Using Modelbit"
      ],
      "metadata": {
        "id": "LWEpst2Y_uWM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade modelbit\n",
        "import modelbit\n",
        "mb = modelbit.login()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-2PPudZD9Cik",
        "outputId": "82cedaf7-75d6-4e3f-8fd0-19e1a79fd672"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: modelbit in /usr/local/lib/python3.10/dist-packages (0.37.8)\n",
            "Requirement already satisfied: pycryptodomex in /usr/local/lib/python3.10/dist-packages (from modelbit) (3.20.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from modelbit) (2.0.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from modelbit) (4.66.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from modelbit) (2.31.0)\n",
            "Requirement already satisfied: types-requests in /usr/local/lib/python3.10/dist-packages (from modelbit) (2.31.0.6)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from modelbit) (6.0.1)\n",
            "Requirement already satisfied: types-PyYAML in /usr/local/lib/python3.10/dist-packages (from modelbit) (6.0.12.20240311)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from modelbit) (3.1.4)\n",
            "Requirement already satisfied: types-pkg-resources in /usr/local/lib/python3.10/dist-packages (from modelbit) (0.1.3)\n",
            "Requirement already satisfied: zstandard in /usr/local/lib/python3.10/dist-packages (from modelbit) (0.22.0)\n",
            "Requirement already satisfied: appdirs in /usr/local/lib/python3.10/dist-packages (from modelbit) (1.4.4)\n",
            "Requirement already satisfied: texttable in /usr/local/lib/python3.10/dist-packages (from modelbit) (1.7.0)\n",
            "Requirement already satisfied: build in /usr/local/lib/python3.10/dist-packages (from modelbit) (0.10.0)\n",
            "Requirement already satisfied: pkginfo in /usr/local/lib/python3.10/dist-packages (from modelbit) (1.10.0)\n",
            "Requirement already satisfied: boto3>=1.23.0 in /usr/local/lib/python3.10/dist-packages (from modelbit) (1.34.113)\n",
            "Requirement already satisfied: urllib3<2,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from modelbit) (1.26.18)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from modelbit) (7.1.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.113 in /usr/local/lib/python3.10/dist-packages (from boto3>=1.23.0->modelbit) (1.34.113)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3>=1.23.0->modelbit) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3>=1.23.0->modelbit) (0.10.1)\n",
            "Requirement already satisfied: packaging>=19.0 in /usr/local/lib/python3.10/dist-packages (from build->modelbit) (24.0)\n",
            "Requirement already satisfied: pyproject_hooks in /usr/local/lib/python3.10/dist-packages (from build->modelbit) (1.1.0)\n",
            "Requirement already satisfied: tomli>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from build->modelbit) (2.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->modelbit) (3.18.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->modelbit) (2.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->modelbit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->modelbit) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->modelbit) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->modelbit) (1.25.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->modelbit) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->modelbit) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->modelbit) (2024.2.2)\n",
            "Requirement already satisfied: types-urllib3 in /usr/local/lib/python3.10/dist-packages (from types-requests->modelbit) (1.26.25.14)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->modelbit) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mb = modelbit.login()"
      ],
      "metadata": {
        "id": "FIjpNSBKDrv0"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Import libraries required by Modelbit for Youtube auto-commenting\n",
        "# (refer to Modelbit's documentation)\n",
        "import modelbit\n",
        "\n",
        "def analyze_video(video_data):\n",
        "  # Analyze the video data (e.g., title, description, keywords)\n",
        "  # to determine an appropriate comment.\n",
        "  comment = \"Your comment based on video analysis\"\n",
        "  return comment\n",
        "\n",
        "# Deploy the analyze_video function using Modelbit's deployment method\n",
        "# (refer to Modelbit's documentation for the specific function)\n",
        "modelbit.deploy(analyze_video)\n"
      ],
      "metadata": {
        "id": "KDyBw0CiZWa-",
        "outputId": "f9ba9c00-3566-4f6a-8bc9-5da1afc483a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 188
        }
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div style=\"margin: 0; padding: 5px; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none;\">\n",
              "  <div>\n",
              "    <span style=\"margin: 0; padding: 0; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none; font-weight: bold; color: #15803d;\">Deploying </span> <span style=\"margin: 0; padding: 3px; line-height: 1.75; font-size: 13px; vertical-align: baseline; list-style: none; font-family: monospace; background: none; font-weight: 400; background-color: rgba(209, 213, 219, 0.2);\">analyze_video</span>\n",
              "  </div>\n",
              "  \n",
              "\n",
              "  <div style=\"margin: 0; padding: 0; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none;\">Uploading dependencies...</div>\n",
              "</div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div style=\"margin: 0; padding: 5px; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none;\">\n",
              "  <div style=\"margin: 0; padding: 0; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none; font-weight: bold; color: #15803d;\">Success!</div>\n",
              "  \n",
              "    <div style=\"margin: 0; padding: 0; line-height: 1.75; font-size: 14px; vertical-align: baseline; list-style: none; font-family: Roboto, Arial, sans-serif; background: none;\">\n",
              "      Deployment <span style=\"margin: 0; padding: 3px; line-height: 1.75; font-size: 13px; vertical-align: baseline; list-style: none; font-family: monospace; background: none; font-weight: 400; background-color: rgba(209, 213, 219, 0.2);\">analyze_video</span>\n",
              "      will be ready in  a few seconds!\n",
              "    </div>\n",
              "  \n",
              "\n",
              "  <a href=\"https://ap-south-1.modelbit.com/w/luckystarlet/main/deployments/analyze_video/apis\" target=\"_blank\" style=\"display: inline-block; margin-top: 12px;\" >\n",
              "    <div\n",
              "      style=\"display: inline-block; background-color: #845B99; border-radius: 0.375rem; color: white; cursor: pointer; font-size: 14px; font-weight: 700; padding: 8px 16px;\"\n",
              "      onmouseenter=\"this.style.background='#714488'\"\n",
              "      onmouseleave=\"this.style.background='#845B99'\"\n",
              "    >\n",
              "      View in Modelbit\n",
              "    </div>\n",
              "  </a>\n",
              "</div>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}